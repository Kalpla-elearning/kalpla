const { PrismaClient } = require('@prisma/client')
const path = require('path')
require('dotenv').config({ path: path.join(__dirname, '..', '.env.local') })

const prisma = new PrismaClient()

async function testAllFixes() {
  try {
    console.log('üîß Testing All Fixes...\n')

    // 1. Test Database Connection
    console.log('1Ô∏è‚É£ Testing Database Connection...')
    try {
      await prisma.$connect()
      console.log('‚úÖ Database connection successful')
    } catch (error) {
      console.log('‚ùå Database connection failed:', error.message)
      return
    }

    // 2. Test API Endpoints
    console.log('\n2Ô∏è‚É£ Testing API Endpoints...')
    
    const endpoints = [
      'http://localhost:3000/api/courses/featured',
      'http://localhost:3000/api/degree-programs',
      'http://localhost:3000/api/blog'
    ]

    for (const endpoint of endpoints) {
      try {
        const response = await fetch(endpoint)
        if (response.ok) {
          console.log(`‚úÖ ${endpoint} - OK`)
        } else {
          console.log(`‚ùå ${endpoint} - ${response.status}`)
        }
      } catch (error) {
        console.log(`‚ùå ${endpoint} - ${error.message}`)
      }
    }

    // 3. Test Page Loading
    console.log('\n3Ô∏è‚É£ Testing Page Loading...')
    
    const pages = [
      'http://localhost:3000/',
      'http://localhost:3000/courses',
      'http://localhost:3000/blog',
      'http://localhost:3000/degrees',
      'http://localhost:3000/courses/digital-marketing-masterclass'
    ]

    for (const page of pages) {
      try {
        const response = await fetch(page)
        if (response.ok) {
          console.log(`‚úÖ ${page} - OK`)
        } else {
          console.log(`‚ùå ${page} - ${response.status}`)
        }
      } catch (error) {
        console.log(`‚ùå ${page} - ${error.message}`)
      }
    }

    // 4. Test Database Queries
    console.log('\n4Ô∏è‚É£ Testing Database Queries...')
    
    try {
      const courses = await prisma.course.findMany({ take: 1 })
      console.log(`‚úÖ Courses query - Found ${courses.length} courses`)
    } catch (error) {
      console.log('‚ùå Courses query failed:', error.message)
    }

    try {
      const posts = await prisma.post.findMany({ take: 1 })
      console.log(`‚úÖ Posts query - Found ${posts.length} posts`)
    } catch (error) {
      console.log('‚ùå Posts query failed:', error.message)
    }

    try {
      const degreePrograms = await prisma.degreeProgram.findMany({ take: 1 })
      console.log(`‚úÖ Degree programs query - Found ${degreePrograms.length} programs`)
    } catch (error) {
      console.log('‚ùå Degree programs query failed:', error.message)
    }

    // 5. Test Connection Pool
    console.log('\n5Ô∏è‚É£ Testing Connection Pool...')
    
    const promises = []
    for (let i = 0; i < 5; i++) {
      promises.push(
        prisma.course.findMany({ take: 1 })
          .then(() => console.log(`‚úÖ Connection ${i + 1} - OK`))
          .catch(error => console.log(`‚ùå Connection ${i + 1} - ${error.message}`))
      )
    }
    
    await Promise.all(promises)

    // 6. Test Error Handling
    console.log('\n6Ô∏è‚É£ Testing Error Handling...')
    
    try {
      // This should trigger an error but be handled gracefully
      await prisma.course.findMany({
        where: { invalidField: 'test' }
      })
    } catch (error) {
      if (error.message.includes('Unknown argument')) {
        console.log('‚úÖ Error handling - Database validation working')
      } else {
        console.log('‚ùå Unexpected error:', error.message)
      }
    }

    // 7. Test Image Configuration
    console.log('\n7Ô∏è‚É£ Testing Image Configuration...')
    
    try {
      const response = await fetch('http://localhost:3000/courses')
      const content = await response.text()
      
      if (content.includes('images.unsplash.com')) {
        console.log('‚úÖ Unsplash images detected in content')
      } else {
        console.log('‚ÑπÔ∏è No Unsplash images found (may be using placeholders)')
      }
    } catch (error) {
      console.log('‚ùå Image test failed:', error.message)
    }

    console.log('\nüéâ All Fixes Test Complete!')
    console.log('\nüìã Summary of Fixes Applied:')
    console.log('‚úÖ Database connection pool optimized')
    console.log('‚úÖ Connection timeout increased to 20s')
    console.log('‚úÖ Connection limit reduced to 3')
    console.log('‚úÖ Next.js image configuration updated')
    console.log('‚úÖ Error handling added to all database queries')
    console.log('‚úÖ Prisma configuration optimized')
    console.log('‚úÖ Graceful shutdown handlers added')
    console.log('‚úÖ Unsplash and placeholder images supported')

  } catch (error) {
    console.error('‚ùå Test failed:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testAllFixes()
