// Simplified schema for SQLite development
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String
  role          String    @default("STUDENT") // ADMIN, INSTRUCTOR, STUDENT
  avatar        String?
  bio           String?
  isVerified    Boolean   @default(false)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  courses       Course[]  @relation("CourseInstructor")
  enrollments   Enrollment[]
  progressRecords Progress[]
  reviews       Review[]
  posts         Post[]    @relation("AuthoredPosts")
  sentMessages  Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  @@map("users")
}

model Course {
  id            String    @id @default(cuid())
  title         String
  description   String
  thumbnail     String?
  price         Float
  category      String?
  tags          String?   // JSON string for SQLite
  instructorId  String
  status        String    @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  instructor    User      @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)
  modules       Module[]
  enrollments   Enrollment[]
  reviews       Review[]

  @@map("courses")
}

model Module {
  id          String    @id @default(cuid())
  title       String
  description String?
  courseId    String
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  contents    Content[]

  @@map("modules")
}

model Content {
  id          String    @id @default(cuid())
  title       String
  description String?
  type        String    // VIDEO, PDF, QUIZ, ASSIGNMENT, TEXT
  url         String?
  content     String?   // For text content
  moduleId    String
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  module      Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress    Progress[]

  @@map("contents")
}

model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  status      String    @default("PENDING") // PENDING, ACTIVE, COMPLETED, CANCELLED
  enrolledAt  DateTime  @default(now())
  completedAt DateTime?

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    Progress[]

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Progress {
  id          String    @id @default(cuid())
  userId      String
  contentId   String
  enrollmentId String
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  content     Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  enrollment  Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
  @@map("progress")
}

model Review {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  rating      Int
  comment     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("reviews")
}

model Post {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String
  thumbnail   String?
  tags        String?   // JSON string for SQLite
  isPublished Boolean   @default(false)
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  author      User      @relation("AuthoredPosts", fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}
